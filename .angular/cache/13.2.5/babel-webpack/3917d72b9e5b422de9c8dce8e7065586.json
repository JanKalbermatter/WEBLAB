{"ast":null,"code":"import { __awaiter } from \"tslib\";\nimport { initializeApp } from 'firebase/app';\nimport { getFirestore, collection, doc, updateDoc, onSnapshot, setDoc, getDoc } from 'firebase/firestore';\nimport { Subject } from 'rxjs';\nimport { environment } from 'src/environments/environment';\nimport * as i0 from \"@angular/core\";\nexport let DatabaseService = /*#__PURE__*/(() => {\n  class DatabaseService {\n    constructor() {\n      this.updatedSnapshot = new Subject();\n      this.obsr_UpdatedSnapshot = this.updatedSnapshot.asObservable();\n      initializeApp(environment.firebaseConfig);\n      this.db = getFirestore();\n      this.userCol = collection(this.db, 'userInfo'); // Get Realtime Data\n\n      onSnapshot(this.userCol, snapshot => {\n        this.updatedSnapshot.next(snapshot);\n      }, err => {\n        console.log(err);\n      });\n    }\n\n    getUserInfo(key) {\n      return __awaiter(this, void 0, void 0, function* () {\n        const docRef = doc(this.db, 'userInfo', key);\n        const docSnap = yield getDoc(docRef);\n\n        if (docSnap.exists()) {\n          return docSnap.data();\n        }\n      });\n    }\n\n    createUserInfo(key, userInfo) {\n      return __awaiter(this, void 0, void 0, function* () {\n        const docRef = doc(this.db, 'userInfo', key);\n        yield setDoc(docRef, userInfo);\n      });\n    }\n\n    removeUserInfo(key) {\n      return __awaiter(this, void 0, void 0, function* () {\n        const docRef = doc(this.db, 'userInfo', key);\n        this.getUsers(key).then(data => __awaiter(this, void 0, void 0, function* () {\n          let index = data.summoners.indexOf(summoner);\n\n          if (index !== -1) {\n            data.summoners.splice(index, 1);\n          }\n\n          yield this.replaceUser(key, data);\n        }));\n      });\n    }\n\n    udpateUserInfo(key, userInfo) {\n      return __awaiter(this, void 0, void 0, function* () {\n        const docRef = doc(this.db, 'userInfo', key);\n        yield setDoc(docRef, userInfo);\n      });\n    }\n\n    removeSummoner(key, summoner) {\n      return __awaiter(this, void 0, void 0, function* () {\n        this.getUserInfo(key).then(userInfo => {\n          userInfo = userInfo.summoners.filter(summonerData => {\n            return summonerData.name.toLowerCase() !== summoner.toLowerCase();\n          });\n          this.udpateUserInfo(key, userInfo);\n        });\n      });\n    }\n\n    addSummoner(key, summoner) {\n      return __awaiter(this, void 0, void 0, function* () {\n        const docRef = doc(this.db, 'userInfo', key);\n        this.getUsers(key).then(data => __awaiter(this, void 0, void 0, function* () {\n          console.log('Achtung hier: ', data);\n\n          if (!data) {\n            yield this.addUser(key, summoner, profileId);\n          } else {\n            if (data.summoners.indexOf(summoner) === -1) {\n              data.summoners.push(summoner);\n            }\n\n            data.profileId = profileId;\n            yield updateDoc(docRef, data);\n          }\n        }));\n      });\n    }\n\n    replaceUser(key, newDoc) {\n      return __awaiter(this, void 0, void 0, function* () {\n        const docRef = doc(this.db, 'userInfo', key);\n        yield setDoc(docRef, newDoc);\n      });\n    }\n\n  }\n\n  DatabaseService.ɵfac = function DatabaseService_Factory(t) {\n    return new (t || DatabaseService)();\n  };\n\n  DatabaseService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: DatabaseService,\n    factory: DatabaseService.ɵfac,\n    providedIn: 'root'\n  });\n  return DatabaseService;\n})();","map":null,"metadata":{},"sourceType":"module"}