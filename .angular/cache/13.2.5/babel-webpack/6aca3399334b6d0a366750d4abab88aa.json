{"ast":null,"code":"import { __awaiter } from \"tslib\";\nimport { initializeApp } from 'firebase/app';\nimport { getFirestore, collection, addDoc, getDocs, deleteDoc, doc, updateDoc, onSnapshot } from 'firebase/firestore';\nimport { Subject } from 'rxjs';\nimport { environment } from 'src/environments/environment';\nimport * as i0 from \"@angular/core\";\nexport let DatabaseService = /*#__PURE__*/(() => {\n  class DatabaseService {\n    constructor() {\n      this.updatedSnapshot = new Subject();\n      this.obsr_UpdatedSnapshot = this.updatedSnapshot.asObservable();\n      initializeApp(environment.firebaseConfig);\n      this.db = getFirestore();\n      this.userCol = collection(this.db, 'userInfo'); // Get Realtime Data\n\n      onSnapshot(this.userCol, snapshot => {\n        this.updatedSnapshot.next(snapshot);\n      }, err => {\n        console.log(err);\n      });\n    }\n\n    getUsers() {\n      return __awaiter(this, void 0, void 0, function* () {\n        return getDocs(this.userCol);\n      });\n    }\n\n    addUser(summoner) {\n      return __awaiter(this, void 0, void 0, function* () {\n        yield addDoc(this.userCol);\n      });\n    }\n\n    deleteUser(docId) {\n      return __awaiter(this, void 0, void 0, function* () {\n        const docRef = doc(this.db, 'userInfo', docId);\n        yield deleteDoc(docRef);\n      });\n    }\n\n    updateUser(docId, summoner) {\n      return __awaiter(this, void 0, void 0, function* () {\n        const docRef = doc(this.db, 'userInfo', docId);\n        yield updateDoc(docRef, {\n          summoner\n        });\n      });\n    }\n\n  }\n\n  DatabaseService.ɵfac = function DatabaseService_Factory(t) {\n    return new (t || DatabaseService)();\n  };\n\n  DatabaseService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: DatabaseService,\n    factory: DatabaseService.ɵfac,\n    providedIn: 'root'\n  });\n  return DatabaseService;\n})();","map":null,"metadata":{},"sourceType":"module"}