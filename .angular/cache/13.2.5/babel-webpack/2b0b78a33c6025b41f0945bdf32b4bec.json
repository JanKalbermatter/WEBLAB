{"ast":null,"code":"import { __awaiter } from \"tslib\";\nimport { initializeApp } from 'firebase/app';\nimport { getFirestore, collection, deleteDoc, doc, onSnapshot, setDoc, getDoc } from 'firebase/firestore';\nimport { Subject } from 'rxjs';\nimport { environment } from 'src/environments/environment';\nimport * as i0 from \"@angular/core\";\nexport let DatabaseService = /*#__PURE__*/(() => {\n  class DatabaseService {\n    constructor() {\n      this.updatedSnapshot = new Subject();\n      this.obsvSnapshot = this.updatedSnapshot.asObservable();\n      initializeApp(environment.firebaseConfig);\n      this.db = getFirestore();\n      this.userCol = collection(this.db, 'userInfo'); // Get Realtime Data\n\n      onSnapshot(this.userCol, snapshot => {\n        this.updatedSnapshot.next(snapshot);\n      }, err => {\n        console.log(err);\n      });\n    }\n\n    getUserInfo(key) {\n      return __awaiter(this, void 0, void 0, function* () {\n        const docRef = doc(this.db, 'userInfo', key);\n        const docSnap = yield getDoc(docRef);\n\n        if (docSnap.exists()) {\n          return docSnap.data();\n        }\n      });\n    }\n\n    createUserInfo(key, userInfo) {\n      return __awaiter(this, void 0, void 0, function* () {\n        const docRef = doc(this.db, 'userInfo', key);\n        yield setDoc(docRef, userInfo);\n      });\n    }\n\n    removeUserInfo(key) {\n      return __awaiter(this, void 0, void 0, function* () {\n        const docRef = doc(this.db, 'userInfo', key);\n        yield deleteDoc(docRef);\n      });\n    }\n\n    udpateUserInfo(key, userInfo) {\n      return __awaiter(this, void 0, void 0, function* () {\n        const docRef = doc(this.db, 'userInfo', key);\n        yield setDoc(docRef, userInfo);\n      });\n    }\n\n    addSummoner(key, summoner, profilePictureId) {\n      return __awaiter(this, void 0, void 0, function* () {\n        this.getUserInfo(key).then(userInfo => __awaiter(this, void 0, void 0, function* () {\n          console.log('Achtung hier: ', userInfo);\n\n          if (!userInfo) {\n            yield this.createUserInfo(key, {\n              summoners: [{\n                profilePictureId,\n                name: summoner\n              }]\n            });\n          } else {\n            userInfo.summoners.forEach(summonerData => {\n              if (summonerData.name.toLowerCase() === summoner.toLowerCase()) {\n                return;\n              }\n            });\n            userInfo.summoners.push({\n              profilePictureId,\n              name: summoner\n            });\n            yield this.udpateUserInfo(key, userInfo);\n          }\n        }));\n      });\n    }\n\n    removeSummoner(key, summoner) {\n      return __awaiter(this, void 0, void 0, function* () {\n        this.getUserInfo(key).then(userInfo => {\n          const newSummoners = userInfo.summoners.filter(summonerData => {\n            return summonerData.name.toLowerCase() !== summoner.toLowerCase();\n          });\n          this.udpateUserInfo(key, {\n            summoners: newSummoners\n          });\n        });\n      });\n    }\n\n    isFollower(key, summoner) {\n      return __awaiter(this, void 0, void 0, function* () {\n        this.getUserInfo(key).then(userInfo => {\n          const searchResult = userInfo.summoners.find(summonerData => {\n            return summonerData.name.toLowerCase() === summoner.toLowerCase();\n          });\n          return searchResult === undefined;\n        });\n      });\n    }\n\n  }\n\n  DatabaseService.ɵfac = function DatabaseService_Factory(t) {\n    return new (t || DatabaseService)();\n  };\n\n  DatabaseService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: DatabaseService,\n    factory: DatabaseService.ɵfac,\n    providedIn: 'root'\n  });\n  return DatabaseService;\n})();","map":null,"metadata":{},"sourceType":"module"}